{
    "techniques":[
        {
         "name": "Fastbin Dup",
         "primitives": [
            "double free"
         ],
         "urls": [
            "https://github.com/shellphish/how2heap/blob/master/glibc_2.27/fastbin_dup.c",
            "https://github.com/shellphish/how2heap/blob/master/glibc_2.27/fastbin_dup_consolidate.c",
            "https://github.com/shellphish/how2heap/blob/master/glibc_2.27/fastbin_dup_into_stack.c"
        ],
        "notes":{
            "header": "",
            "bulletins": [
                ""
            ]
        }      
        },
        {
            "name": "House of Einherjar",
            "primitives": [
                "posion null byte",
                "heap leak"
            ],
            "urls": [
                "https://github.com/shellphish/how2heap/blob/master/glibc_2.27/house_of_einherjar.c"
            ],
            "notes":{
                "header": "Also Requires:",
                "bulletins": [
                    "Disabled tcache-option for glibc or with size of b larger than 0x408."
                ]
            }       
        },
        {
            "name": "House of Force",
            "primitives": [
                "heap overflow"
            ],
            "urls": [
                "https://github.com/shellphish/how2heap/blob/master/glibc_2.27/house_of_force.c"
            ],
            "notes":{
                "header": "",
                "bulletins": [
                    ""
                ]
            }      
        },
        {
            "name": "House of Lore",
            "primitives": [
                "fake chunk"
            ],
            "urls": [
                "https://github.com/shellphish/how2heap/blob/master/glibc_2.27/house_of_lore.c"
            ],
            "notes":{
                "header": "Notes:",
                "bulletins": [
                    "Depending what bin you are targeting you'll need to bypass malloc security mechanisms pertaining to that bin; malloc.c is a good place to start when looking for what security mechanisms you need to bypass."
                ]
            }    
        },
        {
            "name": "House of Mind - Fastbin Variant",
            "primitives": [
                "infinite allocations",
                "single byte bof",
                "heap leak"
            ],
            "urls": [
                "https://github.com/shellphish/how2heap/blob/master/glibc_2.27/house_of_mind_fastbin.c"
            ],
            "notes":{
                "header": "Also Requires:",
                "bulletins": [
                    "Fake non-main arena.",
                    "Fastbin only",
                    "No tcache or tcache filled",
                    "bof == buffer overflow"
                ]
            }    
        },
        {
            "name": "House of Spirit",
            "primitives": [
                "fake chunk",
                "known target address"
            ],
            "urls": [
                "https://github.com/shellphish/how2heap/blob/master/glibc_2.27/house_of_spirit.c"
            ],
            "notes":{
                "header": "Also Requires:",
                "bulletins": [
                    "Ability to set up the start/end of the target memory"
                ]
            }    
        },
        {
            "name": "House of Storm",
            "primitives": [
                "full tcache",
                "unsorted bin attack",
                "large bin attack",
                "write-what-where"
            ],
            "urls": [
                "https://github.com/shellphish/how2heap/blob/master/glibc_2.27/house_of_storm.c"
            ],
            "notes":{
                "header": "Also Requires:",
                "bulletins": [
                    "The unsorted bin chunk MUST be larger than the large bin chunk.",
                    "Careful heap feng shui.",
                    "[CWE-123](https://cwe.mitre.org/data/definitions/123.html): Write-what-where (fastbins and main_arena for this picticular technique)."
                ]
            }    
        },
        {
            "name": "Large Bin Attack",
            "primitives": [
                "relative overwrites"
            ],
            "urls": [
                "https://github.com/shellphish/how2heap/blob/master/glibc_2.27/large_bin_attack.c"
            ],
            "notes":{
                "header": "",
                "bulletins": [
                    ""
                ]
            }    
        },
        {
            "name": "Mmap Overlapping Chunks",
            "primitives": [
                "extremly large allocation request"
            ],
            "urls": [
                "https://github.com/shellphish/how2heap/blob/master/glibc_2.27/mmap_overlapping_chunks.c"
            ],
            "notes":{
                "header": "",
                "bulletins": [
                    ""
                ]
            }    
        },
        {
            "name": "Overlapping Chunks",
            "primitives": [
                "heap overflow"
            ],
            "urls": [
                "https://github.com/shellphish/how2heap/blob/master/glibc_2.27/overlapping_chunks.c"
            ],
            "notes":{
                "header": "",
                "bulletins": [
                    ""
                ]
            }    
        },
        {
            "name": "Poison Null Byte",
            "primitives": [
                "disabled tcache",
                "off-by-one"
            ],
            "urls": [
                "https://github.com/shellphish/how2heap/blob/master/glibc_2.27/poison_null_byte.c"
            ],
            "notes":{
                "header": "",
                "bulletins": [
                    ""
                ]
            }    
        },
        {
            "name": "Unsafe Unlink",
            "primitives": [
                "known-target-location",
                "can unlink",
                "heap overflow",
                "fake chunk"
            ],
            "urls": [
                "https://github.com/shellphish/how2heap/blob/master/glibc_2.27/unsafe_unlink.c"
            ],
            "notes":{
                "header": "Notes:",
                "bulletins": [
                    "This technique can be used when you have a pointer at a known location to a region you can call unlink on."
                ]
            }    
        },
        {
            "name": "Unsorted Bin Attack",
            "primitives": [
                "known-target-location",
                "relative overwrites",
                "freeing control",
                "allocation control"            
            ],
            "urls": [
                "https://github.com/shellphish/how2heap/blob/master/glibc_2.27/unsorted_bin_attack.c",
                "https://github.com/shellphish/how2heap/blob/master/glibc_2.27/unsorted_bin_into_stack.c"
            ],
            "notes":{
                "header": "",
                "bulletins": [
                    ""
                ]
            }    
        },{
            "name": "Fastbin Reverse Into tcache",
            "primitives": [
                "freeing control",
                "allocation control",
                "known-target-location",
                "write-what-where"
            ],
            "urls": [
                "https://github.com/shellphish/how2heap/blob/master/glibc_2.27/fastbin_reverse_into_tcache.c"
            ],
            "notes":{
                "header": "",
                "bulletins": [
                    ""
                ]
            }    
        },
        {
            "name": "House of Botcake",
            "primitives": [
                "double free"
            ],
            "urls": [
                "https://github.com/shellphish/how2heap/blob/master/glibc_2.27/house_of_botcake.c"
            ],
            "notes":{
                "header": "",
                "bulletins": [
                    ""
                ]
            }    
        },
        {
            "name": "tcache House of Spirit",
            "primitives": [
                "fake chunk",
                "known target address"
            ],
            "urls": [
                "https://github.com/shellphish/how2heap/blob/master/glibc_2.27/tcache_house_of_spirit.c"
            ],
            "notes":{
                "header": "",
                "bulletins": [
                    ""
                ]
            }    
        },
        {
            "name": "tcache Poisoning",
            "primitives": [
                "known target address",
                "freeing control",
                "allocation control"
            ],
            "urls": [
                "https://github.com/shellphish/how2heap/blob/master/glibc_2.27/tcache_poisoning.c"
            ],
            "notes":{
                "header": "",
                "bulletins": [
                    ""
                ]
            }    
        },
        {
            "name": "tcache Stashing Unlink Attack",
            "primitives": [
                "relative overwrites",
                "calloc",
                "write-what-where",
                "libc leak",
                "fake chunk"
            ],
            "urls": [
                "https://github.com/shellphish/how2heap/blob/master/glibc_2.27/tcache_stashing_unlink_attack.c"
            ],
            "notes":{
                "header": "",
                "bulletins": [
                    ""
                ]
            }    
        }
    ]
}

